{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: numpy in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (2.2.3)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[notice] A new release of pip is available: 24.3.1 -> 25.0.1\n",
      "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
     ]
    }
   ],
   "source": [
    "%pip install numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pandas in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (2.2.3)\n",
      "Requirement already satisfied: numpy>=1.26.0 in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from pandas) (2.2.3)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\diviv\\appdata\\roaming\\python\\python313\\site-packages (from pandas) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from pandas) (2025.1)\n",
      "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from pandas) (2025.1)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\diviv\\appdata\\roaming\\python\\python313\\site-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[notice] A new release of pip is available: 24.3.1 -> 25.0.1\n",
      "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
     ]
    }
   ],
   "source": [
    "%pip install pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: scikit-learn in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (1.6.1)\n",
      "Requirement already satisfied: numpy>=1.19.5 in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from scikit-learn) (2.2.3)\n",
      "Requirement already satisfied: scipy>=1.6.0 in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from scikit-learn) (1.15.2)\n",
      "Requirement already satisfied: joblib>=1.2.0 in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from scikit-learn) (1.4.2)\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from scikit-learn) (3.5.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[notice] A new release of pip is available: 24.3.1 -> 25.0.1\n",
      "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
     ]
    }
   ],
   "source": [
    "%pip install scikit-learn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: Flask in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (3.1.0)\n",
      "Requirement already satisfied: Werkzeug>=3.1 in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from Flask) (3.1.3)\n",
      "Requirement already satisfied: Jinja2>=3.1.2 in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from Flask) (3.1.5)\n",
      "Requirement already satisfied: itsdangerous>=2.2 in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from Flask) (2.2.0)\n",
      "Requirement already satisfied: click>=8.1.3 in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from Flask) (8.1.8)\n",
      "Requirement already satisfied: blinker>=1.9 in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from Flask) (1.9.0)\n",
      "Requirement already satisfied: colorama in c:\\users\\diviv\\appdata\\roaming\\python\\python313\\site-packages (from click>=8.1.3->Flask) (0.4.6)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from Jinja2>=3.1.2->Flask) (3.0.2)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[notice] A new release of pip is available: 24.3.1 -> 25.0.1\n",
      "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
     ]
    }
   ],
   "source": [
    "%pip install Flask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: xgboost in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (2.1.4)\n",
      "Requirement already satisfied: numpy in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from xgboost) (2.2.3)\n",
      "Requirement already satisfied: scipy in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from xgboost) (1.15.2)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[notice] A new release of pip is available: 24.3.1 -> 25.0.1\n",
      "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
     ]
    }
   ],
   "source": [
    "%pip install xgboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (0.13.2)\n",
      "Requirement already satisfied: numpy!=1.24.0,>=1.20 in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from seaborn) (2.2.3)\n",
      "Requirement already satisfied: pandas>=1.2 in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from seaborn) (2.2.3)\n",
      "Requirement already satisfied: matplotlib!=3.6.1,>=3.4 in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from seaborn) (3.10.1)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (1.3.1)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (0.12.1)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (4.56.0)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (1.4.8)\n",
      "Requirement already satisfied: packaging>=20.0 in c:\\users\\diviv\\appdata\\roaming\\python\\python313\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (24.2)\n",
      "Requirement already satisfied: pillow>=8 in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (11.1.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (3.2.1)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in c:\\users\\diviv\\appdata\\roaming\\python\\python313\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from pandas>=1.2->seaborn) (2025.1)\n",
      "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\diviv\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from pandas>=1.2->seaborn) (2025.1)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\diviv\\appdata\\roaming\\python\\python313\\site-packages (from python-dateutil>=2.7->matplotlib!=3.6.1,>=3.4->seaborn) (1.17.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[notice] A new release of pip is available: 24.3.1 -> 25.0.1\n",
      "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
     ]
    }
   ],
   "source": [
    "%pip install seaborn"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Importing the necessary libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing the necessary libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "from sklearn import linear_model\n",
    "from sklearn import tree\n",
    "from sklearn import ensemble\n",
    "from sklearn import svm\n",
    "import xgboost"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Importing the Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('traffic volume.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Analyse The Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>holiday</th>\n",
       "      <th>temp</th>\n",
       "      <th>rain</th>\n",
       "      <th>snow</th>\n",
       "      <th>weather</th>\n",
       "      <th>date</th>\n",
       "      <th>Time</th>\n",
       "      <th>traffic_volume</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>288.28</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Clouds</td>\n",
       "      <td>02-10-2012</td>\n",
       "      <td>09:00:00</td>\n",
       "      <td>5545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>289.36</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Clouds</td>\n",
       "      <td>02-10-2012</td>\n",
       "      <td>10:00:00</td>\n",
       "      <td>4516</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>289.58</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Clouds</td>\n",
       "      <td>02-10-2012</td>\n",
       "      <td>11:00:00</td>\n",
       "      <td>4767</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>290.13</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Clouds</td>\n",
       "      <td>02-10-2012</td>\n",
       "      <td>12:00:00</td>\n",
       "      <td>5026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>291.14</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Clouds</td>\n",
       "      <td>02-10-2012</td>\n",
       "      <td>13:00:00</td>\n",
       "      <td>4918</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  holiday    temp  rain  snow weather        date      Time  traffic_volume\n",
       "0     NaN  288.28   0.0   0.0  Clouds  02-10-2012  09:00:00            5545\n",
       "1     NaN  289.36   0.0   0.0  Clouds  02-10-2012  10:00:00            4516\n",
       "2     NaN  289.58   0.0   0.0  Clouds  02-10-2012  11:00:00            4767\n",
       "3     NaN  290.13   0.0   0.0  Clouds  02-10-2012  12:00:00            5026\n",
       "4     NaN  291.14   0.0   0.0  Clouds  02-10-2012  13:00:00            4918"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>temp</th>\n",
       "      <th>rain</th>\n",
       "      <th>snow</th>\n",
       "      <th>traffic_volume</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>48151.000000</td>\n",
       "      <td>48202.000000</td>\n",
       "      <td>48192.000000</td>\n",
       "      <td>48204.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>281.205351</td>\n",
       "      <td>0.334278</td>\n",
       "      <td>0.000222</td>\n",
       "      <td>3259.818355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>13.343675</td>\n",
       "      <td>44.790062</td>\n",
       "      <td>0.008169</td>\n",
       "      <td>1986.860670</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>272.160000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1193.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>282.460000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3380.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>291.810000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4933.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>310.070000</td>\n",
       "      <td>9831.300000</td>\n",
       "      <td>0.510000</td>\n",
       "      <td>7280.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               temp          rain          snow  traffic_volume\n",
       "count  48151.000000  48202.000000  48192.000000    48204.000000\n",
       "mean     281.205351      0.334278      0.000222     3259.818355\n",
       "std       13.343675     44.790062      0.008169     1986.860670\n",
       "min        0.000000      0.000000      0.000000        0.000000\n",
       "25%      272.160000      0.000000      0.000000     1193.000000\n",
       "50%      282.460000      0.000000      0.000000     3380.000000\n",
       "75%      291.810000      0.000000      0.000000     4933.000000\n",
       "max      310.070000   9831.300000      0.510000     7280.000000"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 48204 entries, 0 to 48203\n",
      "Data columns (total 8 columns):\n",
      " #   Column          Non-Null Count  Dtype  \n",
      "---  ------          --------------  -----  \n",
      " 0   holiday         61 non-null     object \n",
      " 1   temp            48151 non-null  float64\n",
      " 2   rain            48202 non-null  float64\n",
      " 3   snow            48192 non-null  float64\n",
      " 4   weather         48155 non-null  object \n",
      " 5   date            48204 non-null  object \n",
      " 6   Time            48204 non-null  object \n",
      " 7   traffic_volume  48204 non-null  int64  \n",
      "dtypes: float64(3), int64(1), object(4)\n",
      "memory usage: 2.9+ MB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Handling Missing Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "holiday           48143\n",
       "temp                 53\n",
       "rain                  2\n",
       "snow                 12\n",
       "weather              49\n",
       "date                  0\n",
       "Time                  0\n",
       "traffic_volume        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        0.0\n",
       "1        0.0\n",
       "2        0.0\n",
       "3        0.0\n",
       "4        0.0\n",
       "        ... \n",
       "48199    0.0\n",
       "48200    0.0\n",
       "48201    0.0\n",
       "48202    0.0\n",
       "48203    0.0\n",
       "Name: snow, Length: 48204, dtype: float64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['temp'].fillna(data['temp'].mean())\n",
    "data['rain'].fillna(data['rain'].mean())\n",
    "data['snow'].fillna(data['snow'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "from collections import Counter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Counter({'Clouds': 15144, 'Clear': 13383, 'Mist': 5942, 'Rain': 5665, 'Snow': 2875, 'Drizzle': 1818, 'Haze': 1359, 'Thunderstorm': 1033, 'Fog': 912, nan: 49, 'Smoke': 20, 'Squall': 4})\n"
     ]
    }
   ],
   "source": [
    "print(Counter(data['weather']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.corr\n",
    "data = data.select_dtypes(include=[\"number\"])  # Keep only numeric columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "corr = data.corr()  # Correct\n",
    "sns.heatmap(corr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "data = pd.read_csv('traffic volume.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x1efa8067e00>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x1000 with 20 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.pairplot(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data.boxplot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "le = LabelEncoder()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['weather'] = le.fit_transform(data['weather'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>holiday</th>\n",
       "      <th>temp</th>\n",
       "      <th>rain</th>\n",
       "      <th>snow</th>\n",
       "      <th>weather</th>\n",
       "      <th>date</th>\n",
       "      <th>Time</th>\n",
       "      <th>traffic_volume</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>288.28</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>02-10-2012</td>\n",
       "      <td>09:00:00</td>\n",
       "      <td>5545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>289.36</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>02-10-2012</td>\n",
       "      <td>10:00:00</td>\n",
       "      <td>4516</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>289.58</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>02-10-2012</td>\n",
       "      <td>11:00:00</td>\n",
       "      <td>4767</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>290.13</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>02-10-2012</td>\n",
       "      <td>12:00:00</td>\n",
       "      <td>5026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>291.14</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>02-10-2012</td>\n",
       "      <td>13:00:00</td>\n",
       "      <td>4918</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  holiday    temp  rain  snow  weather        date      Time  traffic_volume\n",
       "0     NaN  288.28   0.0   0.0        1  02-10-2012  09:00:00            5545\n",
       "1     NaN  289.36   0.0   0.0        1  02-10-2012  10:00:00            4516\n",
       "2     NaN  289.58   0.0   0.0        1  02-10-2012  11:00:00            4767\n",
       "3     NaN  290.13   0.0   0.0        1  02-10-2012  12:00:00            5026\n",
       "4     NaN  291.14   0.0   0.0        1  02-10-2012  13:00:00            4918"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['temp'] = le.fit_transform(data['temp'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "data[[\"day\", \"month\", \"year\"]] = data[\"date\"].str.split(\"-\", expand=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "data[[\"hours\", \"minutes\", \"seconds\"]] = data[\"Time\"].str.split(\":\", expand=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.drop(columns=['date', 'Time'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>holiday</th>\n",
       "      <th>temp</th>\n",
       "      <th>rain</th>\n",
       "      <th>snow</th>\n",
       "      <th>weather</th>\n",
       "      <th>traffic_volume</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>hours</th>\n",
       "      <th>minutes</th>\n",
       "      <th>seconds</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4025</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5545</td>\n",
       "      <td>02</td>\n",
       "      <td>10</td>\n",
       "      <td>2012</td>\n",
       "      <td>09</td>\n",
       "      <td>00</td>\n",
       "      <td>00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4145</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4516</td>\n",
       "      <td>02</td>\n",
       "      <td>10</td>\n",
       "      <td>2012</td>\n",
       "      <td>10</td>\n",
       "      <td>00</td>\n",
       "      <td>00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4168</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4767</td>\n",
       "      <td>02</td>\n",
       "      <td>10</td>\n",
       "      <td>2012</td>\n",
       "      <td>11</td>\n",
       "      <td>00</td>\n",
       "      <td>00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4229</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5026</td>\n",
       "      <td>02</td>\n",
       "      <td>10</td>\n",
       "      <td>2012</td>\n",
       "      <td>12</td>\n",
       "      <td>00</td>\n",
       "      <td>00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4346</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4918</td>\n",
       "      <td>02</td>\n",
       "      <td>10</td>\n",
       "      <td>2012</td>\n",
       "      <td>13</td>\n",
       "      <td>00</td>\n",
       "      <td>00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  holiday  temp  rain  snow  weather  traffic_volume day month  year hours  \\\n",
       "0     NaN  4025   0.0   0.0        1            5545  02    10  2012    09   \n",
       "1     NaN  4145   0.0   0.0        1            4516  02    10  2012    10   \n",
       "2     NaN  4168   0.0   0.0        1            4767  02    10  2012    11   \n",
       "3     NaN  4229   0.0   0.0        1            5026  02    10  2012    12   \n",
       "4     NaN  4346   0.0   0.0        1            4918  02    10  2012    13   \n",
       "\n",
       "  minutes seconds  \n",
       "0      00      00  \n",
       "1      00      00  \n",
       "2      00      00  \n",
       "3      00      00  \n",
       "4      00      00  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Splitting the Dataset into Dependent and Independent variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.preprocessing import LabelEncoder, StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = data.drop(columns=['traffic_volume'], axis=1)\n",
    "x = data.drop(columns=['traffic_volume'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feature Scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "names = x.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = pd.DataFrame(x, columns = names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = pd.DataFrame(y, columns= names)  # Ensure correct column name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>holiday</th>\n",
       "      <th>temp</th>\n",
       "      <th>rain</th>\n",
       "      <th>snow</th>\n",
       "      <th>weather</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>hours</th>\n",
       "      <th>minutes</th>\n",
       "      <th>seconds</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4025</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>02</td>\n",
       "      <td>10</td>\n",
       "      <td>2012</td>\n",
       "      <td>09</td>\n",
       "      <td>00</td>\n",
       "      <td>00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4145</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>02</td>\n",
       "      <td>10</td>\n",
       "      <td>2012</td>\n",
       "      <td>10</td>\n",
       "      <td>00</td>\n",
       "      <td>00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4168</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>02</td>\n",
       "      <td>10</td>\n",
       "      <td>2012</td>\n",
       "      <td>11</td>\n",
       "      <td>00</td>\n",
       "      <td>00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4229</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>02</td>\n",
       "      <td>10</td>\n",
       "      <td>2012</td>\n",
       "      <td>12</td>\n",
       "      <td>00</td>\n",
       "      <td>00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4346</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>02</td>\n",
       "      <td>10</td>\n",
       "      <td>2012</td>\n",
       "      <td>13</td>\n",
       "      <td>00</td>\n",
       "      <td>00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  holiday  temp  rain  snow  weather day month  year hours minutes seconds\n",
       "0     NaN  4025   0.0   0.0        1  02    10  2012    09      00      00\n",
       "1     NaN  4145   0.0   0.0        1  02    10  2012    10      00      00\n",
       "2     NaN  4168   0.0   0.0        1  02    10  2012    11      00      00\n",
       "3     NaN  4229   0.0   0.0        1  02    10  2012    12      00      00\n",
       "4     NaN  4346   0.0   0.0        1  02    10  2012    13      00      00"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define Features and Target Variable\n",
    "x = data.drop(columns=['traffic_volume'])  # Features\n",
    "y = data['traffic_volume']  # Target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(48204, 11)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(48204,)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "holiday     object\n",
      "temp         int64\n",
      "rain       float64\n",
      "snow       float64\n",
      "weather      int64\n",
      "day         object\n",
      "month       object\n",
      "year        object\n",
      "hours       object\n",
      "minutes     object\n",
      "seconds     object\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(x.dtypes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Splitting the data into Train and Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "categorical_columns = ['holiday', 'temp', 'rain', 'snow', 'weather', 'year', 'month', 'day', 'hours', 'minutes', 'seconds']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "label_encoders = {}\n",
    "for col in categorical_columns:\n",
    "    le = LabelEncoder()\n",
    "    x[col] = le.fit_transform(x[col])  # Convert categorical to numeric\n",
    "    label_encoders[col] = le  # Store encoders for later use"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Splitting dataset into training and testing sets\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(38563, 11)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model Building"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Training and Testing the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Model Initializations\n",
    "lin_reg = linear_model.LinearRegression()\n",
    "Dtree = tree.DecisionTreeRegressor()\n",
    "Rand = ensemble.RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "svr = svm.SVR()\n",
    "XGB = xgboost.XGBRegressor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "holiday    0\n",
      "temp       0\n",
      "rain       0\n",
      "snow       0\n",
      "weather    0\n",
      "day        0\n",
      "month      0\n",
      "year       0\n",
      "hours      0\n",
      "minutes    0\n",
      "seconds    0\n",
      "dtype: int64\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "print(x_train.isnull().sum())  # Check for missing values in each column\n",
    "print(y_train.isnull().sum())  # Check for missing values in target variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.impute import SimpleImputer\n",
    "\n",
    "imputer = SimpleImputer(strategy=\"mean\")  # Options: \"median\", \"most_frequent\"\n",
    "x_train = imputer.fit_transform(x_train)# Fills missing values with mean\n",
    "x_test = imputer.transform(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None,\n",
       "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "             gamma=None, grow_policy=None, importance_type=None,\n",
       "             interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "             max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "             multi_strategy=None, n_estimators=None, n_jobs=None,\n",
       "             num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>XGBRegressor</div></div><div><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None,\n",
       "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "             gamma=None, grow_policy=None, importance_type=None,\n",
       "             interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "             max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "             multi_strategy=None, n_estimators=None, n_jobs=None,\n",
       "             num_parallel_tree=None, random_state=None, ...)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None,\n",
       "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "             gamma=None, grow_policy=None, importance_type=None,\n",
       "             interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "             max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "             multi_strategy=None, n_estimators=None, n_jobs=None,\n",
       "             num_parallel_tree=None, random_state=None, ...)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Train models\n",
    "lin_reg.fit(x_train, y_train)\n",
    "Dtree.fit(x_train, y_train)\n",
    "Rand.fit(x_train, y_train)\n",
    "svr.fit(x_train, y_train)\n",
    "XGB.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "p1 = lin_reg.predict(x_train)\n",
    "p2 = Dtree.predict(x_train)\n",
    "p3 = Rand.predict(x_train)\n",
    "p4 = svr.predict(x_train)\n",
    "p5 = XGB.predict(x_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-5.45898314059456\n",
      "1.0\n",
      "0.9747230692401472\n",
      "-58.11845129400455\n",
      "0.8460580706596375\n"
     ]
    }
   ],
   "source": [
    "print(metrics.r2_score(p1, y_train))\n",
    "print(metrics.r2_score(p2, y_train))\n",
    "print(metrics.r2_score(p3, y_train))\n",
    "print(metrics.r2_score(p4, y_train))\n",
    "print(metrics.r2_score(p5, y_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train = np.nan_to_num(x_train, nan=np.nanmean(x_train))\n",
    "x_test = np.nan_to_num(x_test, nan=np.nanmean(x_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "p1 = lin_reg.predict(x_test)\n",
    "p2 = Dtree.predict(x_test)\n",
    "p3 = Rand.predict(x_test)\n",
    "p4 = svr.predict(x_test)\n",
    "p5 = XGB.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-5.326830630340053\n",
      "0.6833687058990447\n",
      "0.8019717048784262\n",
      "-56.8140817039808\n",
      "0.8068752288818359\n"
     ]
    }
   ],
   "source": [
    "print(metrics.r2_score(p1, y_test))\n",
    "print(metrics.r2_score(p2, y_test))\n",
    "print(metrics.r2_score(p3, y_test))\n",
    "print(metrics.r2_score(p4, y_test))\n",
    "print(metrics.r2_score(p5, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "RMSE –Root Mean Square Error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_squared_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "MSE = mean_squared_error(p3, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.float64(800.7602451294027)"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(MSE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-2 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-2 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-2 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-2 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-2 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestRegressor</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestRegressor.html\">?<span>Documentation for RandomForestRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor(random_state=42)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestRegressor(random_state=42)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "model.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = StandardScaler()\n",
    "x_scaled = scaler.fit_transform(x_test)  # Fit on the current dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "pickle.dump(model, open(\"model.pkl\", \"wb\"))\n",
    "pickle.dump(scaler, open(\"encoder.pkl\", \"wb\"))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}